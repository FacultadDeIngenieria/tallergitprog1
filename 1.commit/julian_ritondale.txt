# 1. Commits

Para el primer ejercicio, se debe crear un archivo `nombre_apellido.txt`, dentro de la carpeta `1.commit`.

En este archivo, se va a guardar las respuestas teóricas y algunos resultados de los mismos.

## Ejercicio 1

### 1.1. Preguntas

1. ¿Cómo se inicializa un repositorio local? (que comando se debe ejecutar?)

git init

2. ¿Cómo hago para que un directorio deje de ser controlado por git? (que comando se debe ejecutar?)

Eliminamos el archivo de git que se encuentra en el directorio, rmdir .git

3. Si agrego un archivo a un directorio que ya está siendo controlado por git, ¿está siendo controlado por git?

Figurara dentro del repositorio, pero git no lo guardara o modificara al menos que ese archivo sea agregado a el 
area de stage

4. ¿Qué comando se utiliza para agregar un archivo al repositorio local?

git commit

5. ¿Cómo determino que archivos fueron modificados? (que comando se debe ejecutar?)

A traves de git status, si el archivo figura en color rojo significa que fue modificado pero no se encuentra guardado
en el repositorio local

6. ¿Qué comando se utiliza para hacer un commit? 

git commit

7. En sus propias palabras, ¿qué es un commit?

Un commit es un comando de git para compartir y seguir las modificaciones de un archivo de una manera organizada y 
segura

### 1.2. Ejercicio Práctico

1. Crear un archivo `nombre_apellido.txt` si no estaba creado previamente. 

COMPLETADO

2. Agregar a `sandwich.txt` condimentos e ingredientes que le gusten, simulando que es un sandwich que se va a comer.

COMPLETADO 

3. Antes de realizar cualquier acción con git, guarde el estado actual del directorio en el archivo `nombre_apellido.txt`. Para esto, se debe ejecutar el comando `git status` y copiar el resultado en el archivo `nombre_apellido.txt`. Explique que significa la salida del comando.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   sandwich.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        julian_ritondale.txt

no changes added to commit (use "git add" and/or "git commit -a")

Como sandwich.txt estaba committed desde antes, aparece por encima de julian_ritondale.txt

COMPLETADO

4. Agregar el archivo `sandwich.txt` al repositorio local. Para esto, se debe ejecutar el comando `git add sandwich.txt`.
    
COMPLETADO
    
5. Explique que cambio en la salida del comando `git status` luego de ejecutar el comando `git add sandwich.txt`.

Como sandwich.txt estaba committed, git add comienza a trackearlo y guarda los cambios en el area de stage
    
COMPLETADO
    
6. Realizar un commit con el mensaje "Agrego mi sandwich.txt". Para esto, se debe ejecutar el comando `git commit -m "Agrego mi sandwich.txt"`.
    
COMPLETADO
    
7. Explique que cambio en la salida del comando `git status` luego de ejecutar el comando `git commit -m "Agrego mi sandwich.txt"`.
    
Como sandwich.txt se encontraba en el area stage, git commit envia los cambios al repositorio junto con el mensaje adjunto: "Agrego mi sandwich.txt"
   
COMPLETADO
    
8. Agregar salsas de su preferencia a `sandwich.txt` y realizar un commit con el mensaje "Agrego salsas".
    
COMPLETADO 
   
9. Escriba la salida del comando `git log` en el archivo `nombre_apellido.txt`. Y explique que significa. ¿En qué orden aparecen los commits?
 
El comando git log imprime una lista de committs junto a su autor y la fecha de ejecucion. Los committs aparecen ordenados por fecha, de mas reciente a menos.
    
COMPLETADO
    
10. Pruebe las variaciones del comando `git log` y explique que observa en cada una de ellas.
    10.1. `git log --oneline`
    
Imprime un log con menos informacion, en donde aparece los mensajes adjuntos a un commit con sus respectivos cambios
    
    10.2. `git log --stat`
    
Imprime la lista de committs como el log comun pero con informacion adicional sobre los archivos modificados y que se modifico.
    
COMPLETADO 
    
11. Inspeccione diferencias entre los commits, use el comando git diff <hash> <hash> y explique que significa cada uno de los resultados.
    
	11.1. En Windows, pruebe `git difftool --tool=meld <hash>`
    
    
    
    11.2. En Linux, pruebe `git difftool --tool=opendiff <hash>`
    
    
    
12. Crear un nuevo archivo dentro de la carpeta `1.commit`, llamado `sandwich2.txt`, y agregarle los ingredientes de su sandwich.
    
COMPLETADO    
    
13. Agregar el archivo `sandwich2.txt` al repositorio local.
    
COMPLETADO    
    
14. Renombrar el archivo `sandwich2.txt` a `sandwich2_feo.txt`. Para esto, se debe ejecutar el comando `git mv sandwich2.txt sandwich2_feo.txt`. Explique que cambio en la salida del comando `git status` luego de hacer un commit con esos cambios y de `git log --oneline`.
    
El archivo sandwich2_feo.txt desaparece de git status y aparece primero en git log --oneline
    
COMPLETADO
    
15. Borre el archivo `sandwich2_feo.txt`. Para esto, se debe ejecutar el comando `git rm sandwich2_feo.txt`. Explique que cambio en la salida del comando `git status` luego de hacer un commit con esos cambios y de `git log --oneline`.
    
En git status, sandwich2_feo.txt figura como eliminado y en git log --online aparece el mensaje adjunto al commit: "Elimino sandwich2_feo.txt"
    
COMPLETADO
    
16. Inspeccione la bitácora usando `git log --stat` y explique lo que ve.
    
Se muestra el registro del ultimo committ y el archivo sandwich2_feo.txt figura con todos sus datos eliminados
    
COMPLETADO

## Finalizado

Una vez finalizado el ejercicio, recuerde guardar sus cambios en `nombre_apellido.txt` y subirlos a **su** repositorio remoto. Este archivo (`README.md`) y `sandwitch.txt` tienen que mantenerse sin ningún cambio.

Para volver a `sandwich.txt` a su estado original, debe buscar el commit que lo contiene y correr el comando:
```bash
git checkout [commit ID] -- 1.commit/sandwich.txt

# ó

git checkout [commit ID] -- sandwich.txt

# dependiendo de donde esté ubicado
