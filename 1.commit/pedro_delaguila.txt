Ejercicio 1

1.1. Preguntas

¿Cómo se inicializa un repositorio local? (que comando se debe ejecutar?)

Para inicializar un repositorio local en Git, debemos abrir la terminal y ubicarnos en el directorio donde queremos que esté el repositorio. Luego, ejecutamos el comando "git init", el cual creará un directorio (algo) ".git" en el directorio actual. Este directorio es el que tendrá toda la información necesaria para que Git pueda gestionar nuestro repositorio.

¿Cómo hago para que un directorio deje de ser controlado por git? (que comando se debe ejecutar?)

Si queremos dejar de controlar un directorio con Git, debemos eliminar el directorio ".git". Para ello, podemos ejecutar el comando "rm -rf .git" en la terminal dentro del directorio que queremos eliminar.

Si agrego un archivo a un directorio que ya está siendo controlado por git, ¿está siendo controlado por git?

Sí, si agregamos un archivo a un directorio que ya está siendo controlado por Git, automáticamente el archivo también estará siendo controlado por Git.


¿Qué comando se utiliza para agregar un archivo al repositorio local?

Para agregar un archivo al repositorio local, debemos ejecutar el comando git add "nombre del archivo". Si queremos agregar todos los archivos modificados del directorio actual, podemos usar el comando "git add .".

¿Cómo determino que archivos fueron modificados? (que comando se debe ejecutar?)

Para determinar qué archivos fueron modificados, podemos ejecutar el comando "git status" en la terminal. Este comando nos mostrará los archivos que han sido cambiados en el directorio actual (con nano o vi o cualquier otro comando) y aún no han sido agregados al área de preparación para hacer un commit.

¿Qué comando se utiliza para hacer un commit?

Para hacer un commit, debemos ejecutar el comando "git commit -m <mensaje del commit>". El mensaje del commit debe describir brevemente los cambios que se han realizado (para poder acordarse de que fue el cambio).

En sus propias palabras, ¿qué es un commit?

Un commit es una acción que se realiza en Git para guardar los cambios que se han hecho en el repositorio local. Al hacer un commit, se guarda una foto instantánea del estado actual del repositorio, lo que nos permite volver a ese estado en caso de ser necesario. Además, cada commit se acompaña de un mensaje que describe los cambios realizados en ese commit para poder acordarnos de la versión.




1.2 Ejercicio Practico

1.2.3 Veo que sandwich.txt esta modificado, ya fue commiteado antes y hay un archivo pedro_delaguila.txt que es nuevo, y nunca fue agregado a git
1.2.5 Despues de hacer git dad sandwich.txt, el archivo paso a estar en staging en lugar de modified. Y sigo viendo el txt en rojo, porque esta en modified.
1.2.7 Despise de hacer el comió no se ve mas el archivo sandwich y solo se ve pedro_delaguila.txt
1.2.9 Git los me muestra el historial de comimos y esta ordenado de el mas reciente al mas viejo
1.2.10 La diferencia entre git log--oneline y git log --stat es que git log --oneline El comando git log --oneline muestra el historial de confirmaciones (commits) en una sola línea por cada commit sin mostrar la información de quien lo hizo, fecha y una abreviatura del has (o sea simple) y en cambio git log --stat muestra una lista de todos los commits (confirmaciones) realizados en el repositorio, junto con la información de resumen y la lista de archivos modificados en cada commit, o sea da en mas detalle todos los commits en que estado están.
1.2.11 Al utilizar el comando "git diff" se pueden ver las diferencias entre el estado actual del repositorio y su último commit. El comando también puede ser usado para comparar diferentes ramas de un repositorio o diferentes versiones de un archivo. Compara dos hash.
1.2.14 Git status muestra que se creo un nuevo archivo sandwich2_feo.txt pero que no esta commiteado. Esta en staged. Git log --oneline no muestra nada porque el archivo no esta commiteado.
1.2.15 En la salida del comando git status, se borro el archivo y ya no aparece para ser commiteado. Git log --oneline no muestra nada ya que el archivo no llego a ser commiteado y en este caso se borro cuando estaba en el directorio local.
1.2.16 Al utilizar git log --stat se puede ver los archivos que ya están commiteados y los archivos que borre no aparecen en la terminal.
