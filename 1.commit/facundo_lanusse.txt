1.1.1. Para crear un comando se usa el comando: init

1.1.2. Para que un directorio deje de ser controlado por git tengo que usar el comando: git rm -r --cached <directory-name>

1.1.3. Si agregas un archivo a un directorio que ya está siendo controlado por Git, entonces ese archivo estará siendo controlado por Git automáticamente.

1.1.4. Para agregar un archivo al repositorio local, hay que usar el siguiente: git add <file-name>

1.1.5. Para determinar qué archivos han sido modificados en el repositorio local hay que usar: git status

1.1.6. Para hacer un commit: git commit -m "mensaje del commit"

1.1.7. Un commit es un registro en el historial de cambios que se le hicieron a un archivo

1.2.3.se puede ver que sandwich.txt fue modificado pero como ya estaba 
commited aparecia en el modified sin guardar. En cambio con 
facundo_lanusse.txt no estaba agregada entonces teniamos que ejecutar git 
add para agregaarla.

1.2.5. despues de hacer git add el archivo paso de estar modificado a 
commited 

1.2.7.Se hizo el commit entonces ahora solo vemos facundo_lanusse.txt sin 
subir

1.2.9.Aparecen los commit de los mas recientes (arriba) y los mas viejos 
(abajo)

1.2.10.1. con git log --oneline te aperece solo los "titulos" de los 
commits 
que hiciste en el mismo orden que mencione anteiormente

1.2.10.2. git log --stat me muestra la informacion mas especifica sobre lo 
que 
hizo el commit, como por ejemplo los caracteres agregados

1.2.15. Después de hacer un commit en Git, el comando git status mostrará 
que no hay cambios pendientes en el directorio de trabajo y la rama actual 
está actualizada con la última confirmación. El comando git log --oneline 
mostrará una lista simplificada de los commits realizados en la rama actual, 
en orden cronológico inverso, con una abreviatura del hash del commit y su 
mensaje de confirmación.

1.2.16. esto te muestra todo la informacion de los commits mas especifica 
con las cosas eliminadas.
