Ejercicio 3

3.1. Preguntas

3.1.1 ¿Qué es un conflicto? Cuando ocurre? ¿Es bueno o malo?

Un conflicto en Git ocurre cuando hay una diferencia entre las versiones de un archivo en diferentes branches del repositorio y Git no puede determinar automáticamente cuál de las versiones debe quedarse en la combinación de las branches. En otras palabras, Git no sabe cómo mergear las dos versiones del archivo en una sola versión que incluya los cambios de ambas branches.


En general, un conflicto en Git no es ni bueno ni malo. Es simplemente una situación en la que dos branches del repositorio han cambiado un archivo de diferentes maneras y Git no puede determinar automáticamente cómo combinar esos cambios.

Cuando Git encuentra un conflicto, marca el archivo en cuestión como "conflicto" y muestra un mensaje que indica que se ha producido un conflicto. Los usuarios deben resolver manualmente los conflictos, es decir, determinar qué cambios mantener y cómo combinar las dos versiones en una sola.

3.1.2 ¿Se puede evitar un conflicto? ¿Cómo?

Los conflictos en Git son inevitables en proyectos colaborativos, aunque hay algunos puntos que ayudan a minimizarlos:

Trabajar en branches separadas
Comunicacion entre las personas que trabajan
Realizar cambios pequeños
Actualizar frecuentemente el repositorio

3.2. Ejercicio Práctico

3.2.10 

Al hacer git diff entre la branch master (pedro_delaguila) y la branch suprema se ve la diferencia entre el milanesa.txt de las dos branches. A una branch se la nombra como a (master) y a la otra como b (suprema). La branch master tiene el contenido de milanesa.txt mostrado en rojo y con lineas - mientras que el contenido de la branch suprema de milanesas.txt esta en verde y con +. Se puede observar que pan rallado se repite en los dos text y esta marcado con un rectángulo rojo a la derecha del contenido de la branch suprema. A diferencia el segundo elemento difiere ya que en la branch master en el milanesa.txt tiene lomo y la branch suprema tiene pollo.

También al hacer git diff entre la branch master (pedro_delaguila) y branch bife se muestra todo de la misma forma con la branch bife y la master teniendo los dos pan rallado en la primer posición pero después la master tiene lomo y la branch bife tiene bife.

3.2.11 Al movermeme a la branch master y poner git status, aparece en rojo que milanesa.txt esta modificado. Y me dice que los cambios no están staged para ser commitedados dándome la opción git add de milanesa.txt para después poder hacer un commit o git restore para dejarlo como estaba antes y sacarle los cambios

3.2.12 Al ejecutar el comando git merge bife funciono y me tiro que estaba todo al dia. 

3.2.13 Al ejecutar el comando git merge suprema no funciona y en la terminal aparece que hay un error. Dice que Your local changes to the following files would be overwritten by merge. Y pide que commitee mis cambios antes de hacer un merge. Luego de hacer git dad y commit, salta un conflict y que fallo el merge

3.2.14 Aparece que milanesa.txt esta modificado pero que no esta staged para poder ser commiteado, para eso debería hacer un git dad de milanesa.txt y después hacer el commit o git restore para borrar los cambios hechos. Una vez que haces git dad y commit salta que hay que arreglar un conflicto o usar git merge --abort para cancelarlo.

3.2.15 El contenido del archivo  en este momento 3.conflicts/milanesa.txt muestra:

Pan rallado
bife

Esto es por el merge que se pudo realizar automáticamente y de forma correcta entre la branch master y la branch bife. (Como ultimo cambio del milanesa.txt)

3.2.18

Resolver manualmente el conflicto para poder hacer el merge entre la branch master y suprema:

Para arreglarlo manualmente se entra al milanesa.txt y se ve marcado en el editor de texto los dos textos que se quieren hacer merge. Como se ve que pan rallado esta dos veces se borra de la branch suprema para que no se superponga y se pueda hacer el merge. Una vez hecho eso se tiran unos comandos por la terminal y se realiza manualmente. Luego pararse con git checkout en la branch master. Después hay que tirar git merge suprema para ver si se resolvió o no el conflicto. Después de haber resuelto los conflictos se pone git add milanesa.txt y después se commitea y se confirma el merge. De esta forma se resuelve el conflicto.


